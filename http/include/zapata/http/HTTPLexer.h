/*
Copyright (c) 2014, Muzzley

Permission to use, copy, modify, and/or distribute this software for 
any purpose with or without fee is hereby granted, provided that the 
above copyright notice and this permission notice appear in all 
copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL 
WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE 
AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL 
DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR 
PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR 
PERFORMANCE OF THIS SOFTWARE.
*/

#pragma once

#include <zapata/http/config.h>

// Generated by Flexc++ V1.08.00 on Tue, 25 Nov 2014 18:01:35 +0000

#ifndef zapataHTTPLexer_H_INCLUDED_
#define zapataHTTPLexer_H_INCLUDED_

// $insert baseclass_h
#include "HTTPLexerbase.h"

// $insert namespace-open
namespace zapata
{

// $insert classHead
class HTTPLexer: public HTTPLexerBase
{
    public:
        explicit HTTPLexer(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        HTTPLexer(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum__ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline HTTPLexer::HTTPLexer(std::istream &in, std::ostream &out)
:
    HTTPLexerBase(in, out)
{}

inline HTTPLexer::HTTPLexer(std::string const &infile, std::string const &outfile)
:
    HTTPLexerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int HTTPLexer::lex()
{
    return lex__();
}

inline void HTTPLexer::preCode() 
{
    // optionally replace by your own code
}

inline void HTTPLexer::postCode(PostEnum__ type) 
{
    // optionally replace by your own code
}

inline void HTTPLexer::print() 
{
    print__();
}

// $insert namespace-close
}

#endif // HTTPLexer_H_INCLUDED_

